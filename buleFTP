#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import serial
import datetime
import time
import os
import pandas as pd
import numpy as np
import glob
import configparser
import Library.Connection as Connection


class config_data:    
    def __init__(self, config_path):
        self.setting_config = {}
        self.connection_config = {}        
        
        config = configparser.ConfigParser()
        config.read(config_path, encoding='utf-8')
        
        #setting        
        items = config.items('setting')
        for item in items:
            self.setting_config[item[0]] = item[1]
        #Connection
        items = config.items('connection')
        for item in items:
            self.connection_config[item[0]] = item[1]
        self.run_connection = int(self.connection_config['run_connection'])



if __name__ == "__main__":
    config_path = '/home/pi/PM25'
    paths = '/home/pi/PM25/Data/'
    port = serial.Serial('/dev/rfcomm0',baudrate=9600)
    # reading and writing data from and to arduino serially.                                      
    # rfcomm0 -> this could be different
    config_list = []
    #config輪循
    for config_file in sorted(glob.glob(config_path + '/config*.ini')):
        print(config_file)
        config_list.append(config_data(config_file))
    print('step2')
    signal_dic = pd.DataFrame()
    for config_class in config_list:
        print('ReadConfig')
         #sync time
    os.system('sudo ntpdate ' + config_class.connection_config['ftp_ip'])
    print('NTP update ',datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
    
    while True:
        data=''
        data_time=0
        data+='datetime,PM0.3,PM0.5,PM1.0,PM2.5\r\n'
        while True:
            time_tmp = datetime.datetime.now().strftime('%Y/%m/%d %H:%M:%S')
            rcv = port.readline()
            if rcv:
                print(rcv,len(rcv))
                if signal_dic.empty:
                    signal_dic = pd.DataFrame(np.array([str(rcv).split('\\')[0].split("'")[1].split(',')]),columns=['PM0.3','PM0.5','PM1.0','PM2.5'])  
                    signal_dic['datetime'] = time_tmp
                else:
                    signal_dic2 = pd.DataFrame(np.array([str(rcv).split('\\')[0].split("'")[1].split(',')]),columns=['PM0.3','PM0.5','PM1.0','PM2.5'])  
                    signal_dic2['datetime'] = time_tmp
                    signal_dic = signal_dic.append(signal_dic2)

                data_time+=1
                if data_time == 60:
                    break
        #print(data)
        print(datetime.datetime.now().strftime('%H%M%S'))
        file_name = datetime.datetime.now().strftime('%Y%m%d_%H%M%S')
#        signal_dic.to_csv(paths+file_name + '.csv',index = False)
#        signal_dic = []
        
        
    ###Toftp
        signal_dicF = {}
        signal_key = "{}".format('PMS01') + time.strftime("_%Y%m%d_%H%M%S", time.localtime())
        signal_dicF[signal_key] = signal_dic
        if(config_class.run_connection):
            print('Upload Sensor Signal...')
            Connection.processing('Sensor', config_class.setting_config, config_class.connection_config, signal_dicF)
            signal_dic = pd.DataFrame()
